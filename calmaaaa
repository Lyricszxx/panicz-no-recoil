local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local aimAssistEnabled = false
local espEnabled = false
local aimSmoothness = 0.2
local fovRadius = 100

-- Criar interface do usuário
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "AimAssistGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local toggleAimButton = Instance.new("TextButton")
toggleAimButton.Size = UDim2.new(0, 100, 0, 50)
toggleAimButton.Position = UDim2.new(1, -110, 0, 10)
toggleAimButton.AnchorPoint = Vector2.new(1, 0)
toggleAimButton.Text = "Aim Assist: OFF"
toggleAimButton.Parent = screenGui

local toggleESPButton = Instance.new("TextButton")
toggleESPButton.Size = UDim2.new(0, 100, 0, 50)
toggleESPButton.Position = UDim2.new(1, -110, 0, 70)
toggleESPButton.AnchorPoint = Vector2.new(1, 0)
toggleESPButton.Text = "ESP: OFF"
toggleESPButton.Parent = screenGui

local fovCircle = Instance.new("Frame")
fovCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
fovCircle.AnchorPoint = Vector2.new(0.5, 0.5)
fovCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
fovCircle.BackgroundTransparency = 1
fovCircle.Parent = screenGui

local fovOutline = Instance.new("UIStroke")
fovOutline.Color = Color3.new(1, 1, 1)
fovOutline.Transparency = 0.5
fovOutline.Thickness = 2
fovOutline.Parent = fovCircle

local fovCorner = Instance.new("UICorner")
fovCorner.CornerRadius = UDim.new(1, 0)
fovCorner.Parent = fovCircle

-- Função para atualizar a posição do FOV
local function updateFOVPosition()
    local viewportSize = workspace.CurrentCamera.ViewportSize
    fovCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
    fovCircle.Size = UDim2.new(0, fovRadius * 2, 0, fovRadius * 2)
end

local function getTargetPart(character)
    local parts = {"Head", "HumanoidRootPart", "UpperTorso", "LowerTorso", "Torso"}
    for _, partName in ipairs(parts) do
        local part = character:FindFirstChild(partName)
        if part then
            return part
        end
    end
    return nil
end

local function isInFOV(part)
    local screenPos, onScreen = workspace.CurrentCamera:WorldToScreenPoint(part.Position)
    if not onScreen then return false end
    
    local screenCenter = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y / 2)
    local distanceFromCenter = (Vector2.new(screenPos.X, screenPos.Y) - screenCenter).Magnitude
    
    return distanceFromCenter <= fovRadius
end

local function getClosestEnemy()
    local closestEnemy = nil
    local closestDistance = math.huge
    local targetPart = nil

    for _, otherPlayer in pairs(Players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character then
            local part = getTargetPart(otherPlayer.Character)
            if part and isInFOV(part) then
                local distance = (part.Position - player.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                    closestEnemy = otherPlayer
                    closestDistance = distance
                    targetPart = part
                end
            end
        end
    end

    return closestEnemy, targetPart
end

local function lerpCFrame(a, b, t)
    return a:Lerp(b, t)
end

local function updateAimAssist()
    if aimAssistEnabled then
        local closestEnemy, targetPart = getClosestEnemy()
        if closestEnemy and targetPart then
            local targetPosition = targetPart.Position
            local cameraPosition = workspace.CurrentCamera.CFrame.Position
            local targetCFrame = CFrame.new(cameraPosition, targetPosition)
            
            workspace.CurrentCamera.CFrame = lerpCFrame(workspace.CurrentCamera.CFrame, targetCFrame, aimSmoothness)
        end
    end
end

-- Função para criar ou atualizar o ESP para um jogador
local function updateESP(player)
    if player == Players.LocalPlayer then return end

    local character = player.Character
    if not character then return end

    local highlight = character:FindFirstChild("Highlight")
    if not highlight then
        highlight = Instance.new("Highlight")
        highlight.FillColor = Color3.new(1, 0, 0)
        highlight.OutlineColor = Color3.new(1, 1, 1)
        highlight.FillTransparency = 0.5
        highlight.OutlineTransparency = 0
        highlight.Parent = character
    end

    highlight.Enabled = espEnabled
end

-- Função para atualizar o ESP para todos os jogadores
local function updateAllESP()
    for _, player in pairs(Players:GetPlayers()) do
        updateESP(player)
    end
end

-- Função para alternar a assistência de mira
local function toggleAimAssist()
    aimAssistEnabled = not aimAssistEnabled
    toggleAimButton.Text = "Aim Assist: " .. (aimAssistEnabled and "ON" or "OFF")
    fovCircle.Visible = aimAssistEnabled
end

-- Função para alternar o ESP
local function toggleESP()
    espEnabled = not espEnabled
    toggleESPButton.Text = "ESP: " .. (espEnabled and "ON" or "OFF")
    updateAllESP()
end

-- Conectar os botões às funções de alternância
toggleAimButton.TouchTap:Connect(toggleAimAssist)
toggleESPButton.TouchTap:Connect(toggleESP)

-- Atualizar a assistência de mira, a posição do FOV e o ESP a cada quadro
RunService.RenderStepped:Connect(function()
    updateAimAssist()
    updateFOVPosition()
    updateAllESP()
end)

-- Atualizar a posição do FOV quando o tamanho da tela muda
workspace.CurrentCamera:GetPropertyChangedSignal("ViewportSize"):Connect(updateFOVPosition)

-- Atualizar o ESP quando um novo jogador entra no jogo
Players.PlayerAdded:Connect(updateESP)

-- Inicialização
fovCircle.Visible = false
updateFOVPosition()
updateAllESP()
